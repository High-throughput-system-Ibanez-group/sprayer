import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef } from "react";
import { io, type Socket } from "socket.io-client";

let socket: Socket;

type Axis = "x" | "y" | "z";

const Home: NextPage = () => {
  const refInputX = useRef<HTMLInputElement>(null);
  const refInputY = useRef<HTMLInputElement>(null);
  const refInputZ = useRef<HTMLInputElement>(null);

  useEffect(() => {
    void startSocket();
  }, []);

  const handleZeroingClick = (type: "start" | "end") => {
    console.log("ZeroingClick button clicked");
    socket.emit("command", `zeroing_${type}`);
  };

  const handleStepperSubmit = (stepperAxis: Axis) => {
    console.log("Stepper button clicked");
    let value;
    switch (stepperAxis) {
      case "x":
        value = refInputX.current?.value;
        break;
      case "y":
        value = refInputY.current?.value;
        break;
      case "z":
        value = refInputZ.current?.value;
        break;
      default:
        console.log("No option selected");
    }
    if (value) {
      socket.emit("command", `stepper_${stepperAxis}:${value}`);
    }
  };

  const startSocket = async () => {
    await fetch("/api/socket");
    socket = io();

    socket.on("connect", () => {
      console.log("connected");
    });
  };

  const onClickTest = () => {
    console.log("Test button clicked");
    socket.emit("command", "test");
  };

  return (
    <>
      <Head>
        <title>IST Project</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex-1">
        <div className="flex h-screen flex-col">
          {/* Nav Bar */}
          <nav className="flex items-center justify-between bg-gray-800 p-4 text-white">
            <div className="text-xl font-bold">Sprayer</div>
            <div className="flex">
              <div className="mx-4 cursor-pointer">Home</div>
            </div>
          </nav>
          {/* Content */}
          <div className="flex flex-grow items-center justify-center">
            <div className="w-full max-w-lg p-4">
              <div className="flex flex-row items-center space-x-4">
                {/* Test button */}
                <button
                  type="button"
                  className="cursor-pointer items-center rounded bg-green-400 py-2 px-4 font-bold text-gray-800 hover:bg-green-200"
                  onClick={onClickTest}
                >
                  Send test
                </button>
                {/* Zeroing Start */}
                <button
                  className="cursor-pointer items-center rounded bg-orange-400 py-2 px-4 font-bold text-gray-800 hover:bg-orange-200"
                  onClick={() => {
                    handleZeroingClick("start");
                  }}
                >
                  zeroing start
                </button>{" "}
                {/* Zeroing End */}
                <button
                  className="cursor-pointer items-center rounded bg-orange-400 py-2 px-4 font-bold text-gray-800 hover:bg-orange-200"
                  onClick={() => {
                    handleZeroingClick("end");
                  }}
                >
                  zeroing end
                </button>
              </div>

              <div className="h-4" />
              {/* Test axis */}
              <div className="flex-col">
                <div className="flex items-center space-x-4">
                  <label htmlFor="number-input" className="font-medium">
                    Enter a number for the x:
                  </label>
                  <input
                    type="number"
                    id="number-input"
                    className="w-32 rounded-md border border-gray-300 px-3 py-2"
                    ref={refInputX}
                  />
                  <button
                    type="button"
                    className="rounded-md bg-blue-500 py-2 px-4 font-medium text-white hover:bg-blue-600"
                    onClick={() => {
                      handleStepperSubmit("x");
                    }}
                  >
                    Submit x
                  </button>
                </div>
                <div className="h-4" />
                <div className="flex items-center space-x-4">
                  <label htmlFor="number-input" className="font-medium">
                    Enter a number for the y:
                  </label>
                  <input
                    type="number"
                    id="number-input"
                    className="w-32 rounded-md border border-gray-300 px-3 py-2"
                    ref={refInputY}
                  />
                  <button
                    type="button"
                    className="rounded-md bg-blue-500 py-2 px-4 font-medium text-white hover:bg-blue-600"
                    onClick={() => {
                      handleStepperSubmit("y");
                    }}
                  >
                    Submit y
                  </button>
                </div>
                <div className="h-4" />
                <div className="flex items-center space-x-4">
                  <label htmlFor="number-input" className="font-medium">
                    Enter a number for the z:
                  </label>
                  <input
                    type="number"
                    id="number-input"
                    className="w-32 rounded-md border border-gray-300 px-3 py-2"
                    ref={refInputZ}
                  />
                  <button
                    type="button"
                    className="rounded-md bg-blue-500 py-2 px-4 font-medium text-white hover:bg-blue-600"
                    onClick={() => {
                      handleStepperSubmit("z");
                    }}
                  >
                    Submit z
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
